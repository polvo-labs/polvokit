{"remainingRequest":"/var/www/html/polvokit/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/var/www/html/polvokit/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/var/www/html/polvokit/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/var/www/html/polvokit/src/components/Calendar/index.js","dependencies":[{"path":"/var/www/html/polvokit/src/components/Calendar/index.js","mtime":1551140902527},{"path":"/var/www/html/polvokit/node_modules/docz-core/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/polvokit/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_nonIterableRest();}function _nonIterableRest(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i[\"return\"]!=null)_i[\"return\"]();}finally{if(_d)throw _e;}}return _arr;}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr;}import React,{useState,useEffect}from'react';import{isSameMonth,isToday,isSameDay,addMonths}from'date-fns';import*as utils from'./utils';import Icon from'../Icon';import{Container,Header,HeaderButton,HeaderInfo,Weekdays,Weekday,Grid,Cell,Day}from'./styles';function Calendar(props){var value=props.value,onChange=props.onChange,formatHeaderDisplay=props.formatHeaderDisplay,formatWeekday=props.formatWeekday,isDaySelectable=props.isDaySelectable;var _useState=useState(value||new Date()),_useState2=_slicedToArray(_useState,2),displayDate=_useState2[0],setDisplayDate=_useState2[1];useEffect(function(){if(value&&!isSameMonth(displayDate,value)){setDisplayDate(value);}},[value]);var days=utils.makeDays(displayDate);return React.createElement(Container,null,React.createElement(Header,null,React.createElement(HeaderButton,{title:\"Previous month\",onClick:function onClick(){return setDisplayDate(addMonths(displayDate,-1));}},React.createElement(Icon,{icon:\"chevron-left\"})),React.createElement(HeaderInfo,null,formatHeaderDisplay(displayDate,props)),React.createElement(HeaderButton,{title:\"Next month\",onClick:function onClick(){return setDisplayDate(addMonths(displayDate,1));}},React.createElement(Icon,{icon:\"chevron-right\"}))),React.createElement(Weekdays,null,[0,1,2,3,4,5,6].map(function(weekday){return React.createElement(Weekday,{key:weekday},formatWeekday(weekday));})),React.createElement(Grid,null,days.map(function(date){var isDisabled=!isDaySelectable(date);return React.createElement(Cell,{key:date.toString()},React.createElement(Day,{isAdjacentMonth:!isSameMonth(displayDate,date),isToday:isToday(date),isSelected:isSameDay(date,value),isDisabled:isDisabled,onClick:function onClick(){if(isDisabled){return;}if(!isSameDay(date,value)){onChange(date);}}},date.getDate()));})));}Calendar.defaultProps={value:null,onChange:function onChange(){return null;},isDaySelectable:function isDaySelectable(date){return true;},formatWeekday:utils.formatWeekday,formatHeaderDisplay:function formatHeaderDisplay(date){return\"\".concat(utils.formatMonth(date),\" - \").concat(date.getFullYear());}};export default Calendar;Calendar.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"Calendar\",\"props\":{\"value\":{\"defaultValue\":{\"value\":\"null\",\"computed\":false},\"type\":{\"name\":\"instanceOf\",\"value\":\"Date\"},\"required\":false,\"description\":\"Selected Date\"},\"onChange\":{\"defaultValue\":{\"value\":\"() => null\",\"computed\":false},\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"Change handler\"},\"isDaySelectable\":{\"defaultValue\":{\"value\":\"date => true\",\"computed\":false},\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"Whether the day is selectable\"},\"formatWeekday\":{\"defaultValue\":{\"value\":\"utils.formatWeekday\",\"computed\":true},\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"Weekday formatter\"},\"formatHeaderDisplay\":{\"defaultValue\":{\"value\":\"date =>\\n  `${utils.formatMonth(date)} - ${date.getFullYear()}`\",\"computed\":false},\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"Header display formatter\"}}};",{"version":3,"sources":["/var/www/html/polvokit/src/components/Calendar/index.js"],"names":["React","useState","useEffect","isSameMonth","isToday","isSameDay","addMonths","utils","Icon","Container","Header","HeaderButton","HeaderInfo","Weekdays","Weekday","Grid","Cell","Day","Calendar","props","value","onChange","formatHeaderDisplay","formatWeekday","isDaySelectable","Date","displayDate","setDisplayDate","days","makeDays","map","weekday","date","isDisabled","toString","getDate","defaultProps","formatMonth","getFullYear"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  isSameMonth,\n  isToday,\n  isSameDay,\n  addMonths\n} from 'date-fns'\nimport * as utils from './utils'\nimport Icon from '../Icon'\nimport {\n  Container,\n  Header,\n  HeaderButton,\n  HeaderInfo,\n  Weekdays,\n  Weekday,\n  Grid,\n  Cell,\n  Day\n} from './styles'\n\nfunction Calendar (props) {\n  const {\n    value,\n    onChange,\n    formatHeaderDisplay,\n    formatWeekday,\n    isDaySelectable\n  } = props\n\n  const [ displayDate, setDisplayDate ] = useState(value || new Date())\n\n  useEffect(() => {\n    if (value && !isSameMonth(displayDate, value)) {\n      setDisplayDate(value)\n    }\n  }, [value])\n\n  const days = utils.makeDays(displayDate)\n\n  return (\n    <Container>\n      <Header>\n        <HeaderButton\n          title='Previous month'\n          onClick={() => setDisplayDate(addMonths(displayDate, -1))}\n        >\n          <Icon icon='chevron-left' />\n        </HeaderButton>\n        <HeaderInfo>\n          {formatHeaderDisplay(displayDate, props)}\n        </HeaderInfo>\n        <HeaderButton\n          title='Next month'\n          onClick={() => setDisplayDate(addMonths(displayDate, 1))}\n        >\n          <Icon icon='chevron-right' />\n        </HeaderButton>\n      </Header>\n      <Weekdays>\n        {[0, 1, 2, 3, 4, 5, 6].map(weekday => (\n          <Weekday key={weekday}>\n            {formatWeekday(weekday)}\n          </Weekday>\n        ))}\n      </Weekdays>\n      <Grid>\n        {days.map(date => {\n          const isDisabled = !isDaySelectable(date)\n          return (\n            <Cell key={date.toString()}>\n              <Day\n                isAdjacentMonth={!isSameMonth(displayDate, date)}\n                isToday={isToday(date)}\n                isSelected={isSameDay(date, value)}\n                isDisabled={isDisabled}\n                onClick={() => {\n                  if (isDisabled) {\n                    return\n                  }\n\n                  if (!isSameDay(date, value)) {\n                    onChange(date)\n                  }\n                }}\n              >\n                {date.getDate()}\n              </Day>\n            </Cell>\n          )\n        })}\n      </Grid>\n    </Container>\n  )\n}\n\nCalendar.propTypes = {\n  /** Selected Date */\n  value: PropTypes.instanceOf(Date),\n\n  /** Change handler */\n  onChange: PropTypes.func,\n\n  /** Weekday formatter */\n  formatWeekday: PropTypes.func,\n\n  /** Header display formatter */\n  formatHeaderDisplay: PropTypes.func,\n\n  /** Whether the day is selectable */\n  isDaySelectable: PropTypes.func\n}\n\nCalendar.defaultProps = {\n  value: null,\n  onChange: () => null,\n  isDaySelectable: date => true,\n  formatWeekday: utils.formatWeekday,\n  formatHeaderDisplay: date =>\n    `${utils.formatMonth(date)} - ${date.getFullYear()}`\n}\n\nexport default Calendar\n"]}]}