{"remainingRequest":"/var/www/html/polvokit/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/var/www/html/polvokit/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/var/www/html/polvokit/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/var/www/html/polvokit/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/var/www/html/polvokit/src/components/Calendar/index.js","dependencies":[{"path":"/var/www/html/polvokit/src/components/Calendar/index.js","mtime":1551140902527},{"path":"/var/www/html/polvokit/node_modules/docz-core/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/polvokit/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _jsxFileName = \"/var/www/html/polvokit/src/components/Calendar/index.js\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { isSameMonth, isToday, isSameDay, addMonths } from 'date-fns';\nimport * as utils from './utils';\nimport Icon from '../Icon';\nimport { Container, Header, HeaderButton, HeaderInfo, Weekdays, Weekday, Grid, Cell, Day } from './styles';\n\nfunction Calendar(props) {\n  var value = props.value,\n      onChange = props.onChange,\n      formatHeaderDisplay = props.formatHeaderDisplay,\n      formatWeekday = props.formatWeekday,\n      isDaySelectable = props.isDaySelectable;\n\n  var _useState = useState(value || new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      displayDate = _useState2[0],\n      setDisplayDate = _useState2[1];\n\n  useEffect(function () {\n    if (value && !isSameMonth(displayDate, value)) {\n      setDisplayDate(value);\n    }\n  }, [value]);\n  var days = utils.makeDays(displayDate);\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(HeaderButton, {\n    title: \"Previous month\",\n    onClick: function onClick() {\n      return setDisplayDate(addMonths(displayDate, -1));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    icon: \"chevron-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), React.createElement(HeaderInfo, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, formatHeaderDisplay(displayDate, props)), React.createElement(HeaderButton, {\n    title: \"Next month\",\n    onClick: function onClick() {\n      return setDisplayDate(addMonths(displayDate, 1));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    icon: \"chevron-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }))), React.createElement(Weekdays, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, [0, 1, 2, 3, 4, 5, 6].map(function (weekday) {\n    return React.createElement(Weekday, {\n      key: weekday,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, formatWeekday(weekday));\n  })), React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, days.map(function (date) {\n    var isDisabled = !isDaySelectable(date);\n    return React.createElement(Cell, {\n      key: date.toString(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Day, {\n      isAdjacentMonth: !isSameMonth(displayDate, date),\n      isToday: isToday(date),\n      isSelected: isSameDay(date, value),\n      isDisabled: isDisabled,\n      onClick: function onClick() {\n        if (isDisabled) {\n          return;\n        }\n\n        if (!isSameDay(date, value)) {\n          onChange(date);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, date.getDate()));\n  })));\n}\n\nCalendar.propTypes = {\n  /** Selected Date */\n  value: PropTypes.instanceOf(Date),\n\n  /** Change handler */\n  onChange: PropTypes.func,\n\n  /** Weekday formatter */\n  formatWeekday: PropTypes.func,\n\n  /** Header display formatter */\n  formatHeaderDisplay: PropTypes.func,\n\n  /** Whether the day is selectable */\n  isDaySelectable: PropTypes.func\n};\nCalendar.defaultProps = {\n  value: null,\n  onChange: function onChange() {\n    return null;\n  },\n  isDaySelectable: function isDaySelectable(date) {\n    return true;\n  },\n  formatWeekday: utils.formatWeekday,\n  formatHeaderDisplay: function formatHeaderDisplay(date) {\n    return \"\".concat(utils.formatMonth(date), \" - \").concat(date.getFullYear());\n  }\n};\nvar _default = Calendar;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Calendar, \"Calendar\", \"/var/www/html/polvokit/src/components/Calendar/index.js\");\n  reactHotLoader.register(_default, \"default\", \"/var/www/html/polvokit/src/components/Calendar/index.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();\n\nCalendar.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Calendar\",\n  \"props\": {\n    \"value\": {\n      \"defaultValue\": {\n        \"value\": \"null\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"instanceOf\",\n        \"value\": \"Date\"\n      },\n      \"required\": false,\n      \"description\": \"Selected Date\"\n    },\n    \"onChange\": {\n      \"defaultValue\": {\n        \"value\": \"() => null\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Change handler\"\n    },\n    \"isDaySelectable\": {\n      \"defaultValue\": {\n        \"value\": \"date => true\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Whether the day is selectable\"\n    },\n    \"formatWeekday\": {\n      \"defaultValue\": {\n        \"value\": \"utils.formatWeekday\",\n        \"computed\": true\n      },\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Weekday formatter\"\n    },\n    \"formatHeaderDisplay\": {\n      \"defaultValue\": {\n        \"value\": \"date =>\\n  `${utils.formatMonth(date)} - ${date.getFullYear()}`\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Header display formatter\"\n    }\n  }\n};",{"version":3,"sources":["/var/www/html/polvokit/src/components/Calendar/index.js"],"names":["React","useState","useEffect","PropTypes","isSameMonth","isToday","isSameDay","addMonths","utils","Icon","Container","Header","HeaderButton","HeaderInfo","Weekdays","Weekday","Grid","Cell","Day","Calendar","props","value","onChange","formatHeaderDisplay","formatWeekday","isDaySelectable","Date","displayDate","setDisplayDate","days","makeDays","map","weekday","date","isDisabled","toString","getDate","propTypes","instanceOf","func","defaultProps","formatMonth","getFullYear"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  isSameMonth,\n  isToday,\n  isSameDay,\n  addMonths\n} from 'date-fns'\nimport * as utils from './utils'\nimport Icon from '../Icon'\nimport {\n  Container,\n  Header,\n  HeaderButton,\n  HeaderInfo,\n  Weekdays,\n  Weekday,\n  Grid,\n  Cell,\n  Day\n} from './styles'\n\nfunction Calendar (props) {\n  const {\n    value,\n    onChange,\n    formatHeaderDisplay,\n    formatWeekday,\n    isDaySelectable\n  } = props\n\n  const [ displayDate, setDisplayDate ] = useState(value || new Date())\n\n  useEffect(() => {\n    if (value && !isSameMonth(displayDate, value)) {\n      setDisplayDate(value)\n    }\n  }, [value])\n\n  const days = utils.makeDays(displayDate)\n\n  return (\n    <Container>\n      <Header>\n        <HeaderButton\n          title='Previous month'\n          onClick={() => setDisplayDate(addMonths(displayDate, -1))}\n        >\n          <Icon icon='chevron-left' />\n        </HeaderButton>\n        <HeaderInfo>\n          {formatHeaderDisplay(displayDate, props)}\n        </HeaderInfo>\n        <HeaderButton\n          title='Next month'\n          onClick={() => setDisplayDate(addMonths(displayDate, 1))}\n        >\n          <Icon icon='chevron-right' />\n        </HeaderButton>\n      </Header>\n      <Weekdays>\n        {[0, 1, 2, 3, 4, 5, 6].map(weekday => (\n          <Weekday key={weekday}>\n            {formatWeekday(weekday)}\n          </Weekday>\n        ))}\n      </Weekdays>\n      <Grid>\n        {days.map(date => {\n          const isDisabled = !isDaySelectable(date)\n          return (\n            <Cell key={date.toString()}>\n              <Day\n                isAdjacentMonth={!isSameMonth(displayDate, date)}\n                isToday={isToday(date)}\n                isSelected={isSameDay(date, value)}\n                isDisabled={isDisabled}\n                onClick={() => {\n                  if (isDisabled) {\n                    return\n                  }\n\n                  if (!isSameDay(date, value)) {\n                    onChange(date)\n                  }\n                }}\n              >\n                {date.getDate()}\n              </Day>\n            </Cell>\n          )\n        })}\n      </Grid>\n    </Container>\n  )\n}\n\nCalendar.propTypes = {\n  /** Selected Date */\n  value: PropTypes.instanceOf(Date),\n\n  /** Change handler */\n  onChange: PropTypes.func,\n\n  /** Weekday formatter */\n  formatWeekday: PropTypes.func,\n\n  /** Header display formatter */\n  formatHeaderDisplay: PropTypes.func,\n\n  /** Whether the day is selectable */\n  isDaySelectable: PropTypes.func\n}\n\nCalendar.defaultProps = {\n  value: null,\n  onChange: () => null,\n  isDaySelectable: date => true,\n  formatWeekday: utils.formatWeekday,\n  formatHeaderDisplay: date =>\n    `${utils.formatMonth(date)} - ${date.getFullYear()}`\n}\n\nexport default Calendar\n"]}]}